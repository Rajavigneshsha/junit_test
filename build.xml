<?xml  version="1.0" encoding="UTF-8"?>

<project name="jenkins_main_project" default="report.pmd" basedir=".">

	<property file="build.properties"/>
	<property name="src.dir" value="src"/>
	<property name="test.dir" value="test"/>
	<property name="build.dir" value="build"/>
	<property name="build.java.dir" value="${build.dir}/classes"/>
	<property name="build.test.dir" value="${build.dir}/test/classes"/>
	<property name="lib.dir" value="../libs"/>
	<property name="dist.dir" value="dist"/>
	
	<property name="target.report.dir" location="junit_report"/>
	
	
	
		<path id="compile.classpath">
			<fileset dir="${lib.dir}">
				<include name="*.jar"/>
			</fileset>
		</path>
	
		<path id="test.compile.classpath">
			<path refid="compile.classpath" />
			<pathelement location="${build.java.dir}" />
			<pathelement location="${build.test.dir}" />
		</path>
	
		<target name="clean">
			<delete dir="${build.dir}"/>
			<delete dir="${dist.dir}"/>
		</target>
		<target name="init" depends="clean">
			<mkdir dir="${build.dir}"/>
			<mkdir dir="${build.java.dir}"/>
			<mkdir dir="${build.test.dir}"/>
			<mkdir dir="${dist.dir}"/>
		</target>
		<target name="compile" depends="init,if_unix,if_windows">
		</target>
		<target name="checkos">
			<condition property="isWindows" value="true">
				<os family="windows"/> 
			</condition>
			<condition property="isLinux" value="true">
				<os family="unix"/>
			</condition>
		</target> 
		<target name="if_windows" depends="checkos" if="isWindows">
			<javac target="1.7" source="1.7" destdir="${build.java.dir}" debug="true" srcdir="${src.dir}">
				<classpath refid="compile.classpath" />
			</javac>
			<javac target="1.7" source="1.7" destdir="${build.test.dir}" debug="true" srcdir="${test.dir}">
				<classpath>
				     <pathelement location="${build.java.dir}"/>
				     <path refid = "compile.classpath" />
				 </classpath>
			</javac>
		</target>
		<target name="if_unix" depends="checkos" if="isLinux">
			<javac target="1.7" source="1.7" destdir="${build.dir}" debug="true" srcdir="${src.dir}" fork="yes" executable="/opt/java7/bin/javac" compiler="javac1.7">
				<classpath refid="compile.classpath" />
			</javac>
		</target>
		<target name="copy" depends="compile">
			<copy todir="${build.dir}">
				<fileset dir="${basedir}">
					<include name="*.properties" />
				</fileset>			
			</copy>
		</target>
		<target name="war" depends="copy">
			<war destfile="${dist.dir}/jenkins_main_project.war" webxml="WebContent/WEB-INF/web.xml">
				<fileset dir="WebContent">
					<include name="WEB-INF/rest-servlet.xml" />
				</fileset>
				<fileset dir="WebContent" />
				<lib dir="${lib.dir}" />
				<classes dir="${build.java.dir}" />
			</war>
		</target>
		
	<target name="test1" depends="copy">
		<delete dir="${target.report.dir}" /> 
		<mkdir dir="${target.report.dir}"/>
	 
	        <junit printsummary="yes" haltonerror="yes" haltonfailure="yes">
	            <formatter type="plain" usefile="false"/>
	            <formatter type="xml"/>
	            <batchtest todir="${target.report.dir}">
	                <fileset dir="${test.dir}">
	                    <include name="**/*Test.java"/>
	                    <exclude name="**/Test*All.java"/>
	                </fileset>
	            </batchtest>
	        	<classpath refid="test.compile.classpath" />
	        </junit>
	    </target>
	
	<target name="test" depends="copy" description="unit test">
				 <delete dir="${target.report.dir}" /> <mkdir dir="${target.report.dir}" />
			<junit maxmemory="1536m" fork="true" printsummary="yes"
				haltonfailure="no">
				<batchtest todir="${target.report.dir}">
					<fileset dir="${build.test.dir}">
						<!--<include name="com/discernnetwork/pqs/controller/*TestController.*" 
							/> -->
						<include name="com/discernnetwork/jenkins/**/*Test*.*" />
					</fileset>
				</batchtest>
				<formatter type="xml" />
				<classpath refid="test.compile.classpath" />
			</junit>
		</target>
	 
	    <target name="report" depends="test">
	        <mkdir dir="${target.report.dir}/html"/>
	        <junitreport todir="${target.report.dir}">
	            <fileset dir="${target.report.dir}">
	                <include name="TEST-*.xml"/>
	            </fileset>
	            <report todir="${target.report.dir}/html"/>
	        </junitreport>
	    </target>
	
	
	<!-- check style warning xml creation -->
	<property name="checkstyle.home.dir" location="checkstyle-5.0" />
	<property name="target.checkstyle.report.dir" location="check_report"/>
	<target name="report.checkstyle" 
	        description="Generate a report of code convention violations." depends="test">
		    <delete dir="${target.checkstyle.report.dir}" />
	        <taskdef resource="checkstyletask.properties"
	                 classpath="${checkstyle.home.dir}/checkstyle-all-5.0.jar" />

	        <!-- run verification of installation-->
	        <available file="${checkstyle.home.dir}/checkstyle-all-5.0.jar"
	                   property="checkstyle.available" />
	        <fail unless="checkstyle.available"
	              message="Error: CHECKSTYLE_HOME not set or checkstyle-all-5.0.jar not found." />
	        <mkdir dir="${target.checkstyle.report.dir}" />

	        <!-- run analysis-->
	        <checkstyle config="${checkstyle.home.dir}/sun_checks.xml"
	                    failureProperty="checkstyle.failure"
	                    failOnViolation="false"
	        >
	            <formatter type="xml" tofile="${target.checkstyle.report.dir}/checkstyle_report.xml" />
	            <fileset dir="${src.dir}" includes="**/*.java" />
	        </checkstyle>

	   <!--     <style in="${target.checkstyle.report.dir}/checkstyle_report.xml"
	               out="${target.checkstyle.report.dir}/checkstyle_report.html"
	               style="${checkstyle.home.dir}/contrib/checkstyle-noframes.xsl"
	        />   -->
	    </target>
	
	<!-- find bugs xml creation -->
	<property name="findbugs.home.dir" value="findbugs-3.0.1" />
	<property name="target.findbugs.report.dir" location="findbugs_report" />
	<target name="findbugs"
	            depends="report.checkstyle"
	            description="Run code analysis over code to check for problems."
	    >
		<delete dir="${target.findbugs.report.dir}" />
	        <!-- Fail this target if FindBugs is not installed. -->
	        <available file="${findbugs.home.dir}/lib/findbugs.jar" property="findbugs.available" />
	        <fail unless="findbugs.available"
	              message="Error: FINDBUGS_HOME not set or findbugs.jar not found."
	        />
	        <taskdef name="findbugs"
	                 classname="edu.umd.cs.findbugs.anttask.FindBugsTask"
	                 classpath="${findbugs.home.dir}/lib/findbugs-ant.jar"
	        />

	        <!-- Run FindBugs. -->
	        <mkdir dir="${target.findbugs.report.dir}" />
	        <findbugs home="${findbugs.home.dir}"
	                  workHard="true"
	                  output="xml:withMessages"
	                  outputFile="${target.findbugs.report.dir}/findbugs.xml"
	        >
	            <class location="${build.java.dir}" />
	            <auxClasspath>
	                <fileset file="${lib.dir}/*.jar" />
	            </auxClasspath>
	        </findbugs>
	    </target>
	
	<property name="pmd.home.dir" value="pmd-4.2.5" />
	<property name="target.pmd.report.dir" location="pmd_report" />
	
	<path id="pmd2.classpath">
	        <pathelement location="${build}" />
	        <fileset dir="${pmd.home.dir}/lib/">
	            <include name="*.jar" />
	        </fileset>
	</path>
	<taskdef name="pmd" classname="net.sourceforge.pmd.ant.PMDTask" 
	        classpathref="pmd2.classpath" />
	<target name="report.pmd" depends="findbugs">
		<delete dir="${target.pmd.report.dir}" />
	        <mkdir dir="${target.pmd.report.dir}" />
	        <pmd rulesetfiles="rulesets/favorites.xml">
	            <formatter type="xml" toFile="${target.pmd.report.dir}/pmd_report.xml" />
	            <fileset dir="${src.dir}">
	                <include name="**/*.java" />
	            </fileset>
	        </pmd>
	      <!--  <xslt in="${target.pmd.report.dir}/pmd_report.xml"
	              style="${pmd.home.dir}/etc/xslt/pmd-report-per-class.xslt"
	              out="${target.pmd.report.dir}/pmd_report.html"
	        />  -->
	    </target>
	
</project>
	